AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Post Cost Explorer report to Slack

Parameters:
  SlackWebhookUrl:
    Type: String
  ScheduleExpression:
    Type: String
    Default: "cron(0 0 * * ? *)"
  StoreDailyCostScheduleExpression:
    Type: String
    Default: "cron(0 0 * * ? *)"
  PostMonthlyCostReportScheduleExpression:
    Type: String
    Default: "cron(0 0 1 * ? *)"
  DynamoDbRegion:
    Type: String
    Default: "ap-northeast-1"

Resources:
  ### DynamoDB Talbes ###
  DailyCostTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        -
          AttributeName: id
          KeyType: HASH
        -
          AttributeName: timestamp
          KeyType: RANGE
      AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
        -
          AttributeName: timestamp
          AttributeType: N
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
        -
          IndexName: gsi-timestamp
          KeySchema:
            -
              AttributeName: timestamp
              KeyType: HASH
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - region
              - service
              - cost
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

  ### Lambda functions ###
  StoreDailyCost:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: ./src/StoreDailyCost
      Role: !GetAtt StoreDailyCostRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DailyCostTable
          DYNAMO_DB_REGION: !Ref DynamoDbRegion
      Events:
        ScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: !Ref StoreDailyCostScheduleExpression

  # postCostExplorerReportToSlack:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: lambda_function.lambda_handler
  #     Runtime: python3.6
  #     CodeUri: ./src
  #     Timeout: 10
  #     Role: !GetAtt CostExplorerReportLambdaIAMRole.Arn
  #     Environment:
  #       Variables:
  #         SLACK_WEBHOOK_URL: !Ref SlackWebhookUrl
  #     Events:
  #       ScheduleEvent:
  #         Type: Schedule
  #         Properties:
  #           Schedule: !Ref ScheduleExpression

  PostMonthlyCostReport:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: ./src/postMonthlyCostReport
      Role: !GetAtt PostMonthlyCostReportRole.Arn
      Environment:
        Variables:
          SLACK_WEBHOOK_URL: !Ref SlackWebhookUrl
      Events:
        ScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: !Ref PostMonthlyCostReportScheduleExpression

  ### IAM Roles ###
  StoreDailyCostRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: 
              - "sts:AssumeRole"
            Principal:
              Service: 
                - "lambda.amazonaws.com"

  PostDailyCostReportRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: 
              - "sts:AssumeRole"
            Principal:
              Service: 
                - "lambda.amazonaws.com"

  PostMonthlyCostReportRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - 
          PolicyName: "root"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              -  #Policy to allow CostExplorerAPI
                Effect: "Allow"
                Action:
                  - ce:*
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: 
              - "sts:AssumeRole"
            Principal:
              Service: 
                - "lambda.amazonaws.com"
